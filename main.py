import requests
import re
import prettytable as pt
import colored
import argparse
import bs4
def colorize(string, color=None, highlight=None, attrs=None):
    """Apply style on a string"""
    # Colors list: https://pypi.org/project/colored/
    return colored.stylize(
        string,
        (colored.fg(color) if color else "")
        + (colored.bg(highlight) if highlight else "")
        + (colored.attr(attrs) if attrs else ""),
    )
def table(columns, data, hrules=True):
    """Print a table"""
    columns = map(lambda x: colorize(x, attrs="bold"), columns)
    table = pt.PrettyTable(
        hrules=pt.ALL if hrules else pt.FRAME, field_names=columns
    )
    for row in data:
        table.add_row(row)
    table.align = "l"
    table.max_width = 50
    print(table)
    if args.html:
        with open(args.html,"w+") as f:
            f.write(table.get_html_string())
            f.close()
def color_num(num):
    """Attribute a color to the CVSS score"""
    cvss = int(num)
    if cvss < 5:
        color = "green_3b"
    elif cvss <= 10:
        color = "yellow_1"
    elif cvss <= 15:
        color = "orange_1"
    elif cvss <= 20:
        color = "dark_orange"
    else:
        color = "red"
    return color
def get_page_num():
    burp0_url = f"https://www.opencve.io:443/cve?cvss=&search={args.vendor}"
    burp0_cookies = {"SERVERID170368": "55a1b3c3|ZZQhs|ZZQf/", "session": "eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlLCJjc3JmX3Rva2VuIjoiMTk5ODU3NjYwMGJjODYxNmFiMjA4Nzc0Y2IxYzVlMWRjMjM0ZWU0OSJ9.ZZQhsA.QyIIy2cXKbnD6Xl8giWj0KXql_0"}
    burp0_headers = {"Sec-Ch-Ua": "\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"", "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": "\"Windows\"", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Referer": "https://www.opencve.io/cve", "Accept-Encoding": "gzip, deflate", "Accept-Language": "zh-CN,zh;q=0.9", "Connection": "close"}
    x = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
    soup = bs4.BeautifulSoup(x.text,"html.parser")
    m = soup.findAll('td',{"class":"col-md-2"})
    cve_list = []
    product_list = []
    for mm in m:
        try:
            cve_list.append(mm.a["href"])
        except Exception as e:
            continue
    m = soup.findAll('td', {"class":"col-md-3"})
    for mm in m:
        if mm.a != None:
            tmp_href = mm.a["href"]  
            product = re.findall(r'product=(.*)',tmp_href)
            if product:
                product_list.append(product[0])
    page_num = soup.find("span", {"class":"info-box-number"})
    page_num = re.findall(r"\d+",page_num.text)
    page_num = int(page_num[0]) // len(cve_list)
    return page_num
def get_product(i, args, product_dict, keywords):
    burp0_url = f"https://www.opencve.io:443/cve?cvss=&search={args.vendor}&page={i}"
    burp0_cookies = {"SERVERID170368": "55a1b3c3|ZZQrP|ZZQf/", "session": "eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlLCJjc3JmX3Rva2VuIjoiMTk5ODU3NjYwMGJjODYxNmFiMjA4Nzc0Y2IxYzVlMWRjMjM0ZWU0OSJ9.ZZQrOg.FSF3gcO9OAKwIBdHFeBcdjEyxKs"}
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"}
    
    x = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
    soup = bs4.BeautifulSoup(x.text, "html.parser")

    for mm in soup.select('td.col-md-3 a[href*="product="]'):
        product_name = re.search(r'product=(.*)', mm["href"]).group(1)
        tmp_product_name = re.match(r"(.*)_firmware", product_name)
        
        if tmp_product_name:
            continue

        if product_name not in product_dict:
            product_dict[product_name] = {"overflow": 0, "command execution": 0, "number": 1}
        else:
            product_dict[product_name]["number"] += 1

        s = soup.select_one('td.col-md-12.no-bordered')
        if s:
            for key in keywords:
                if re.search(key, s.text):
                    product_dict[product_name][key] += 1

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--vendor", help="Vendor (required)", action="store", dest="vendor", required=True)
    parser.add_argument("--html", help="Html File", action="store", dest="html")
    args = parser.parse_args()
    

    page_num = get_page_num()
    product_dict = {}

    keywords = ["overflow", "command execution"]

    for i in range(1, page_num):
        get_product(i, args, product_dict, keywords)

    sorted_products = sorted(product_dict.items(), key=lambda x: x[1]["number"], reverse=True)

    line_list = []
    columns = ["Vendors", "product", "number", "RCE", "BufferOverflow"]
    for product, v in sorted_products:
        line = [args.vendor,
                product,
                colorize(v["number"], color=color_num(v["number"]), attrs="bold"),
                colorize(v["command execution"], color=color_num(v["command execution"]), attrs="bold"),
                colorize(v["overflow"], color=color_num(v["overflow"]), attrs="bold")]
        line_list.append(line)

    table(columns, line_list, hrules=True)